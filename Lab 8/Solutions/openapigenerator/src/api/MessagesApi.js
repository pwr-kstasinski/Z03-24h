/**
 * Messengerify API
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineResponse200 from '../model/InlineResponse200';

/**
* Messages service.
* @module api/MessagesApi
* @version 0.0.1
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the messageSenderUuidRecipientUuidGet operation.
     * @callback module:api/MessagesApi~messageSenderUuidRecipientUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all messages between 2 users
     * @param {String} senderUuid Sender's uuid
     * @param {String} recipientUuid Recipient's uuid
     * @param {module:api/MessagesApi~messageSenderUuidRecipientUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    messageSenderUuidRecipientUuidGet(senderUuid, recipientUuid, callback) {
      let postBody = null;
      // verify the required parameter 'senderUuid' is set
      if (senderUuid === undefined || senderUuid === null) {
        throw new Error("Missing the required parameter 'senderUuid' when calling messageSenderUuidRecipientUuidGet");
      }
      // verify the required parameter 'recipientUuid' is set
      if (recipientUuid === undefined || recipientUuid === null) {
        throw new Error("Missing the required parameter 'recipientUuid' when calling messageSenderUuidRecipientUuidGet");
      }

      let pathParams = {
        'sender_uuid': senderUuid,
        'recipient_uuid': recipientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/message/{sender_uuid}/{recipient_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messageSenderUuidRecipientUuidPost operation.
     * @callback module:api/MessagesApi~messageSenderUuidRecipientUuidPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends message to provided user
     * @param {String} senderUuid Sender's uuid
     * @param {String} recipientUuid Recipient's uuid
     * @param {module:model/InlineObject} body 
     * @param {module:api/MessagesApi~messageSenderUuidRecipientUuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messageSenderUuidRecipientUuidPost(senderUuid, recipientUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'senderUuid' is set
      if (senderUuid === undefined || senderUuid === null) {
        throw new Error("Missing the required parameter 'senderUuid' when calling messageSenderUuidRecipientUuidPost");
      }
      // verify the required parameter 'recipientUuid' is set
      if (recipientUuid === undefined || recipientUuid === null) {
        throw new Error("Missing the required parameter 'recipientUuid' when calling messageSenderUuidRecipientUuidPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling messageSenderUuidRecipientUuidPost");
      }

      let pathParams = {
        'sender_uuid': senderUuid,
        'recipient_uuid': recipientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/message/{sender_uuid}/{recipient_uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
